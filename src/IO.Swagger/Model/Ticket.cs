/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ticket
    /// </summary>
    [DataContract]
    public partial class Ticket :  IEquatable<Ticket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticket" /> class.
        /// </summary>
        /// <param name="TICKET_ID">TICKET_ID.</param>
        /// <param name="SUBJECT">SUBJECT.</param>
        /// <param name="DATE_REQUIRED_BY">DATE_REQUIRED_BY.</param>
        /// <param name="SEVERITY">SEVERITY.</param>
        /// <param name="DATE_CREATED">DATE_CREATED.</param>
        /// <param name="SOURCE">SOURCE.</param>
        /// <param name="TICKET_UUID">TICKET_UUID.</param>
        /// <param name="STATUS">STATUS.</param>
        /// <param name="IS_INTERNAL">IS_INTERNAL.</param>
        /// <param name="REQUESTOR_GROUP_USER_ID">REQUESTOR_GROUP_USER_ID.</param>
        /// <param name="ASSIGNEE_GROUP_USER_ID">ASSIGNEE_GROUP_USER_ID.</param>
        /// <param name="OWNER_GROUP_USER_ID">OWNER_GROUP_USER_ID.</param>
        /// <param name="REQUESTOR_NAME">REQUESTOR_NAME.</param>
        /// <param name="OWNER_NAME">OWNER_NAME.</param>
        /// <param name="ASSIGNEE_NAME">ASSIGNEE_NAME.</param>
        /// <param name="OWNER_ACCOUNT_NAME">OWNER_ACCOUNT_NAME.</param>
        /// <param name="TICKET_MESSAGES">TICKET_MESSAGES.</param>
        public Ticket(int? TICKET_ID = default(int?), string SUBJECT = default(string), DateTime? DATE_REQUIRED_BY = default(DateTime?), string SEVERITY = default(string), DateTime? DATE_CREATED = default(DateTime?), string SOURCE = default(string), string TICKET_UUID = default(string), string STATUS = default(string), string IS_INTERNAL = default(string), int? REQUESTOR_GROUP_USER_ID = default(int?), int? ASSIGNEE_GROUP_USER_ID = default(int?), int? OWNER_GROUP_USER_ID = default(int?), string REQUESTOR_NAME = default(string), string OWNER_NAME = default(string), string ASSIGNEE_NAME = default(string), string OWNER_ACCOUNT_NAME = default(string), List<TicketMessage> TICKET_MESSAGES = default(List<TicketMessage>))
        {
            this.TICKET_ID = TICKET_ID;
            this.SUBJECT = SUBJECT;
            this.DATE_REQUIRED_BY = DATE_REQUIRED_BY;
            this.SEVERITY = SEVERITY;
            this.DATE_CREATED = DATE_CREATED;
            this.SOURCE = SOURCE;
            this.TICKET_UUID = TICKET_UUID;
            this.STATUS = STATUS;
            this.IS_INTERNAL = IS_INTERNAL;
            this.REQUESTOR_GROUP_USER_ID = REQUESTOR_GROUP_USER_ID;
            this.ASSIGNEE_GROUP_USER_ID = ASSIGNEE_GROUP_USER_ID;
            this.OWNER_GROUP_USER_ID = OWNER_GROUP_USER_ID;
            this.REQUESTOR_NAME = REQUESTOR_NAME;
            this.OWNER_NAME = OWNER_NAME;
            this.ASSIGNEE_NAME = ASSIGNEE_NAME;
            this.OWNER_ACCOUNT_NAME = OWNER_ACCOUNT_NAME;
            this.TICKET_MESSAGES = TICKET_MESSAGES;
        }
        
        /// <summary>
        /// Gets or Sets TICKET_ID
        /// </summary>
        [DataMember(Name="TICKET_ID", EmitDefaultValue=false)]
        public int? TICKET_ID { get; set; }

        /// <summary>
        /// Gets or Sets SUBJECT
        /// </summary>
        [DataMember(Name="SUBJECT", EmitDefaultValue=false)]
        public string SUBJECT { get; set; }

        /// <summary>
        /// Gets or Sets DATE_REQUIRED_BY
        /// </summary>
        [DataMember(Name="DATE_REQUIRED_BY", EmitDefaultValue=false)]
        public DateTime? DATE_REQUIRED_BY { get; set; }

        /// <summary>
        /// Gets or Sets SEVERITY
        /// </summary>
        [DataMember(Name="SEVERITY", EmitDefaultValue=false)]
        public string SEVERITY { get; set; }

        /// <summary>
        /// Gets or Sets DATE_CREATED
        /// </summary>
        [DataMember(Name="DATE_CREATED", EmitDefaultValue=false)]
        public DateTime? DATE_CREATED { get; set; }

        /// <summary>
        /// Gets or Sets SOURCE
        /// </summary>
        [DataMember(Name="SOURCE", EmitDefaultValue=false)]
        public string SOURCE { get; set; }

        /// <summary>
        /// Gets or Sets TICKET_UUID
        /// </summary>
        [DataMember(Name="TICKET_UUID", EmitDefaultValue=false)]
        public string TICKET_UUID { get; set; }

        /// <summary>
        /// Gets or Sets STATUS
        /// </summary>
        [DataMember(Name="STATUS", EmitDefaultValue=false)]
        public string STATUS { get; set; }

        /// <summary>
        /// Gets or Sets IS_INTERNAL
        /// </summary>
        [DataMember(Name="IS_INTERNAL", EmitDefaultValue=false)]
        public string IS_INTERNAL { get; set; }

        /// <summary>
        /// Gets or Sets REQUESTOR_GROUP_USER_ID
        /// </summary>
        [DataMember(Name="REQUESTOR_GROUP_USER_ID", EmitDefaultValue=false)]
        public int? REQUESTOR_GROUP_USER_ID { get; set; }

        /// <summary>
        /// Gets or Sets ASSIGNEE_GROUP_USER_ID
        /// </summary>
        [DataMember(Name="ASSIGNEE_GROUP_USER_ID", EmitDefaultValue=false)]
        public int? ASSIGNEE_GROUP_USER_ID { get; set; }

        /// <summary>
        /// Gets or Sets OWNER_GROUP_USER_ID
        /// </summary>
        [DataMember(Name="OWNER_GROUP_USER_ID", EmitDefaultValue=false)]
        public int? OWNER_GROUP_USER_ID { get; set; }

        /// <summary>
        /// Gets or Sets REQUESTOR_NAME
        /// </summary>
        [DataMember(Name="REQUESTOR_NAME", EmitDefaultValue=false)]
        public string REQUESTOR_NAME { get; set; }

        /// <summary>
        /// Gets or Sets OWNER_NAME
        /// </summary>
        [DataMember(Name="OWNER_NAME", EmitDefaultValue=false)]
        public string OWNER_NAME { get; set; }

        /// <summary>
        /// Gets or Sets ASSIGNEE_NAME
        /// </summary>
        [DataMember(Name="ASSIGNEE_NAME", EmitDefaultValue=false)]
        public string ASSIGNEE_NAME { get; set; }

        /// <summary>
        /// Gets or Sets OWNER_ACCOUNT_NAME
        /// </summary>
        [DataMember(Name="OWNER_ACCOUNT_NAME", EmitDefaultValue=false)]
        public string OWNER_ACCOUNT_NAME { get; set; }

        /// <summary>
        /// Gets or Sets TICKET_MESSAGES
        /// </summary>
        [DataMember(Name="TICKET_MESSAGES", EmitDefaultValue=false)]
        public List<TicketMessage> TICKET_MESSAGES { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticket {\n");
            sb.Append("  TICKET_ID: ").Append(TICKET_ID).Append("\n");
            sb.Append("  SUBJECT: ").Append(SUBJECT).Append("\n");
            sb.Append("  DATE_REQUIRED_BY: ").Append(DATE_REQUIRED_BY).Append("\n");
            sb.Append("  SEVERITY: ").Append(SEVERITY).Append("\n");
            sb.Append("  DATE_CREATED: ").Append(DATE_CREATED).Append("\n");
            sb.Append("  SOURCE: ").Append(SOURCE).Append("\n");
            sb.Append("  TICKET_UUID: ").Append(TICKET_UUID).Append("\n");
            sb.Append("  STATUS: ").Append(STATUS).Append("\n");
            sb.Append("  IS_INTERNAL: ").Append(IS_INTERNAL).Append("\n");
            sb.Append("  REQUESTOR_GROUP_USER_ID: ").Append(REQUESTOR_GROUP_USER_ID).Append("\n");
            sb.Append("  ASSIGNEE_GROUP_USER_ID: ").Append(ASSIGNEE_GROUP_USER_ID).Append("\n");
            sb.Append("  OWNER_GROUP_USER_ID: ").Append(OWNER_GROUP_USER_ID).Append("\n");
            sb.Append("  REQUESTOR_NAME: ").Append(REQUESTOR_NAME).Append("\n");
            sb.Append("  OWNER_NAME: ").Append(OWNER_NAME).Append("\n");
            sb.Append("  ASSIGNEE_NAME: ").Append(ASSIGNEE_NAME).Append("\n");
            sb.Append("  OWNER_ACCOUNT_NAME: ").Append(OWNER_ACCOUNT_NAME).Append("\n");
            sb.Append("  TICKET_MESSAGES: ").Append(TICKET_MESSAGES).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ticket);
        }

        /// <summary>
        /// Returns true if Ticket instances are equal
        /// </summary>
        /// <param name="other">Instance of Ticket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticket other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TICKET_ID == other.TICKET_ID ||
                    this.TICKET_ID != null &&
                    this.TICKET_ID.Equals(other.TICKET_ID)
                ) && 
                (
                    this.SUBJECT == other.SUBJECT ||
                    this.SUBJECT != null &&
                    this.SUBJECT.Equals(other.SUBJECT)
                ) && 
                (
                    this.DATE_REQUIRED_BY == other.DATE_REQUIRED_BY ||
                    this.DATE_REQUIRED_BY != null &&
                    this.DATE_REQUIRED_BY.Equals(other.DATE_REQUIRED_BY)
                ) && 
                (
                    this.SEVERITY == other.SEVERITY ||
                    this.SEVERITY != null &&
                    this.SEVERITY.Equals(other.SEVERITY)
                ) && 
                (
                    this.DATE_CREATED == other.DATE_CREATED ||
                    this.DATE_CREATED != null &&
                    this.DATE_CREATED.Equals(other.DATE_CREATED)
                ) && 
                (
                    this.SOURCE == other.SOURCE ||
                    this.SOURCE != null &&
                    this.SOURCE.Equals(other.SOURCE)
                ) && 
                (
                    this.TICKET_UUID == other.TICKET_UUID ||
                    this.TICKET_UUID != null &&
                    this.TICKET_UUID.Equals(other.TICKET_UUID)
                ) && 
                (
                    this.STATUS == other.STATUS ||
                    this.STATUS != null &&
                    this.STATUS.Equals(other.STATUS)
                ) && 
                (
                    this.IS_INTERNAL == other.IS_INTERNAL ||
                    this.IS_INTERNAL != null &&
                    this.IS_INTERNAL.Equals(other.IS_INTERNAL)
                ) && 
                (
                    this.REQUESTOR_GROUP_USER_ID == other.REQUESTOR_GROUP_USER_ID ||
                    this.REQUESTOR_GROUP_USER_ID != null &&
                    this.REQUESTOR_GROUP_USER_ID.Equals(other.REQUESTOR_GROUP_USER_ID)
                ) && 
                (
                    this.ASSIGNEE_GROUP_USER_ID == other.ASSIGNEE_GROUP_USER_ID ||
                    this.ASSIGNEE_GROUP_USER_ID != null &&
                    this.ASSIGNEE_GROUP_USER_ID.Equals(other.ASSIGNEE_GROUP_USER_ID)
                ) && 
                (
                    this.OWNER_GROUP_USER_ID == other.OWNER_GROUP_USER_ID ||
                    this.OWNER_GROUP_USER_ID != null &&
                    this.OWNER_GROUP_USER_ID.Equals(other.OWNER_GROUP_USER_ID)
                ) && 
                (
                    this.REQUESTOR_NAME == other.REQUESTOR_NAME ||
                    this.REQUESTOR_NAME != null &&
                    this.REQUESTOR_NAME.Equals(other.REQUESTOR_NAME)
                ) && 
                (
                    this.OWNER_NAME == other.OWNER_NAME ||
                    this.OWNER_NAME != null &&
                    this.OWNER_NAME.Equals(other.OWNER_NAME)
                ) && 
                (
                    this.ASSIGNEE_NAME == other.ASSIGNEE_NAME ||
                    this.ASSIGNEE_NAME != null &&
                    this.ASSIGNEE_NAME.Equals(other.ASSIGNEE_NAME)
                ) && 
                (
                    this.OWNER_ACCOUNT_NAME == other.OWNER_ACCOUNT_NAME ||
                    this.OWNER_ACCOUNT_NAME != null &&
                    this.OWNER_ACCOUNT_NAME.Equals(other.OWNER_ACCOUNT_NAME)
                ) && 
                (
                    this.TICKET_MESSAGES == other.TICKET_MESSAGES ||
                    this.TICKET_MESSAGES != null &&
                    this.TICKET_MESSAGES.SequenceEqual(other.TICKET_MESSAGES)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TICKET_ID != null)
                    hash = hash * 59 + this.TICKET_ID.GetHashCode();
                if (this.SUBJECT != null)
                    hash = hash * 59 + this.SUBJECT.GetHashCode();
                if (this.DATE_REQUIRED_BY != null)
                    hash = hash * 59 + this.DATE_REQUIRED_BY.GetHashCode();
                if (this.SEVERITY != null)
                    hash = hash * 59 + this.SEVERITY.GetHashCode();
                if (this.DATE_CREATED != null)
                    hash = hash * 59 + this.DATE_CREATED.GetHashCode();
                if (this.SOURCE != null)
                    hash = hash * 59 + this.SOURCE.GetHashCode();
                if (this.TICKET_UUID != null)
                    hash = hash * 59 + this.TICKET_UUID.GetHashCode();
                if (this.STATUS != null)
                    hash = hash * 59 + this.STATUS.GetHashCode();
                if (this.IS_INTERNAL != null)
                    hash = hash * 59 + this.IS_INTERNAL.GetHashCode();
                if (this.REQUESTOR_GROUP_USER_ID != null)
                    hash = hash * 59 + this.REQUESTOR_GROUP_USER_ID.GetHashCode();
                if (this.ASSIGNEE_GROUP_USER_ID != null)
                    hash = hash * 59 + this.ASSIGNEE_GROUP_USER_ID.GetHashCode();
                if (this.OWNER_GROUP_USER_ID != null)
                    hash = hash * 59 + this.OWNER_GROUP_USER_ID.GetHashCode();
                if (this.REQUESTOR_NAME != null)
                    hash = hash * 59 + this.REQUESTOR_NAME.GetHashCode();
                if (this.OWNER_NAME != null)
                    hash = hash * 59 + this.OWNER_NAME.GetHashCode();
                if (this.ASSIGNEE_NAME != null)
                    hash = hash * 59 + this.ASSIGNEE_NAME.GetHashCode();
                if (this.OWNER_ACCOUNT_NAME != null)
                    hash = hash * 59 + this.OWNER_ACCOUNT_NAME.GetHashCode();
                if (this.TICKET_MESSAGES != null)
                    hash = hash * 59 + this.TICKET_MESSAGES.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
