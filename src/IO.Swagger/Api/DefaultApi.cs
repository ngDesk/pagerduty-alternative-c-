/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        TicketPremadeResponse DeletePremadeResponse (int? ticketPremadeResponseId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        ApiResponse<TicketPremadeResponse> DeletePremadeResponseWithHttpInfo (int? ticketPremadeResponseId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        void DeleteTicketReminder (string ticketId, string ticketReminderId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTicketReminderWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from tag_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        void DeleteTicketTag (string ticketId, string tagId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from tag_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTicketTagWithHttpInfo (string ticketId, string tagId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        TicketPremadeResponse GetPremadeResponse (string ticketPremadeResponseId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        ApiResponse<TicketPremadeResponse> GetPremadeResponseWithHttpInfo (string ticketPremadeResponseId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>TicketPremadeResponse</returns>
        TicketPremadeResponse GetPremadeResponses (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        ApiResponse<TicketPremadeResponse> GetPremadeResponsesWithHttpInfo (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Ticket</returns>
        Ticket GetTicket (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> GetTicketWithHttpInfo (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Ticket</returns>
        Ticket GetTicketReminder (string ticketId, string ticketReminderId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> GetTicketReminderWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Ticket</returns>
        Ticket GetTicketReminders (string ticketId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> GetTicketRemindersWithHttpInfo (string ticketId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Ticket</returns>
        Ticket GetTicketTags (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> GetTicketTagsWithHttpInfo (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>List&lt;Ticket&gt;</returns>
        List<Ticket> GetTickets (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        ApiResponse<List<Ticket>> GetTicketsWithHttpInfo (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketMessage</returns>
        TicketMessage PostTicketMessages (List<TicketMessage> body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketMessage</returns>
        ApiResponse<TicketMessage> PostTicketMessagesWithHttpInfo (List<TicketMessage> body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        void PostTicketReminders (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTicketRemindersWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Ticket</returns>
        Ticket PostTickets (List<TicketMessage> body, decimal? authenticationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        ApiResponse<Ticket> PostTicketsWithHttpInfo (List<TicketMessage> body, decimal? authenticationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        TicketPremadeResponse PutPremadeResponses (TicketPremadeResponse body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        ApiResponse<TicketPremadeResponse> PutPremadeResponsesWithHttpInfo (TicketPremadeResponse body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketMessage</returns>
        TicketMessage PutTicketMessages (TicketMessage body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketMessage</returns>
        ApiResponse<TicketMessage> PutTicketMessagesWithHttpInfo (TicketMessage body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        void PutTicketReminders (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTicketRemindersWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_review
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns></returns>
        void PutTicketReview (Ticket body, string ticketUuid, string rating);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_review
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTicketReviewWithHttpInfo (Ticket body, string ticketUuid, string rating);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        void PutTicketTags (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTicketTagsWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>List&lt;Ticket&gt;</returns>
        List<Ticket> PutTickets (List<Ticket> body, bool? authenticationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        ApiResponse<List<Ticket>> PutTicketsWithHttpInfo (List<Ticket> body, bool? authenticationToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        System.Threading.Tasks.Task<TicketPremadeResponse> DeletePremadeResponseAsync (int? ticketPremadeResponseId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> DeletePremadeResponseAsyncWithHttpInfo (int? ticketPremadeResponseId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTicketReminderAsync (string ticketId, string ticketReminderId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketReminderAsyncWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from tag_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTicketTagAsync (string ticketId, string tagId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove from tag_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketTagAsyncWithHttpInfo (string ticketId, string tagId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        System.Threading.Tasks.Task<TicketPremadeResponse> GetPremadeResponseAsync (string ticketPremadeResponseId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_premade_response_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> GetPremadeResponseAsyncWithHttpInfo (string ticketPremadeResponseId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>Task of TicketPremadeResponse</returns>
        System.Threading.Tasks.Task<TicketPremadeResponse> GetPremadeResponsesAsync (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> GetPremadeResponsesAsyncWithHttpInfo (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> GetTicketAsync (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketAsyncWithHttpInfo (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> GetTicketReminderAsync (string ticketId, string ticketReminderId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve ticket_reminder_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketReminderAsyncWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> GetTicketRemindersAsync (string ticketId, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketRemindersAsyncWithHttpInfo (string ticketId, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> GetTicketTagsAsync (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketTagsAsyncWithHttpInfo (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        System.Threading.Tasks.Task<List<Ticket>> GetTicketsAsync (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetTicketsAsyncWithHttpInfo (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketMessage</returns>
        System.Threading.Tasks.Task<TicketMessage> PostTicketMessagesAsync (List<TicketMessage> body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketMessage>> PostTicketMessagesAsyncWithHttpInfo (List<TicketMessage> body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostTicketRemindersAsync (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostTicketRemindersAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of Ticket</returns>
        System.Threading.Tasks.Task<Ticket> PostTicketsAsync (List<TicketMessage> body, decimal? authenticationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticket>> PostTicketsAsyncWithHttpInfo (List<TicketMessage> body, decimal? authenticationToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        System.Threading.Tasks.Task<TicketPremadeResponse> PutPremadeResponsesAsync (TicketPremadeResponse body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update premade_responses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> PutPremadeResponsesAsyncWithHttpInfo (TicketPremadeResponse body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketMessage</returns>
        System.Threading.Tasks.Task<TicketMessage> PutTicketMessagesAsync (TicketMessage body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketMessage>> PutTicketMessagesAsyncWithHttpInfo (TicketMessage body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTicketRemindersAsync (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update reminders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketRemindersAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_review
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTicketReviewAsync (Ticket body, string ticketUuid, string rating);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update ticket_review
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketReviewAsyncWithHttpInfo (Ticket body, string ticketUuid, string rating);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTicketTagsAsync (string ticketId, Ticket body, string authenticationToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tags
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketTagsAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        System.Threading.Tasks.Task<List<Ticket>> PutTicketsAsync (List<Ticket> body, bool? authenticationToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update tickets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> PutTicketsAsyncWithHttpInfo (List<Ticket> body, bool? authenticationToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Remove from ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        public TicketPremadeResponse DeletePremadeResponse (int? ticketPremadeResponseId, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = DeletePremadeResponseWithHttpInfo(ticketPremadeResponseId, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove from ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        public ApiResponse< TicketPremadeResponse > DeletePremadeResponseWithHttpInfo (int? ticketPremadeResponseId, string authenticationToken)
        {
            // verify the required parameter 'ticketPremadeResponseId' is set
            if (ticketPremadeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'ticketPremadeResponseId' when calling DefaultApi->DeletePremadeResponse");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeletePremadeResponse");

            var localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketPremadeResponseId != null) localVarPathParams.Add("ticket_premade_response_id", Configuration.ApiClient.ParameterToString(ticketPremadeResponseId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePremadeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Remove from ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        public async System.Threading.Tasks.Task<TicketPremadeResponse> DeletePremadeResponseAsync (int? ticketPremadeResponseId, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = await DeletePremadeResponseAsyncWithHttpInfo(ticketPremadeResponseId, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Remove from ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> DeletePremadeResponseAsyncWithHttpInfo (int? ticketPremadeResponseId, string authenticationToken)
        {
            // verify the required parameter 'ticketPremadeResponseId' is set
            if (ticketPremadeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'ticketPremadeResponseId' when calling DefaultApi->DeletePremadeResponse");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeletePremadeResponse");

            var localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketPremadeResponseId != null) localVarPathParams.Add("ticket_premade_response_id", Configuration.ApiClient.ParameterToString(ticketPremadeResponseId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePremadeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Remove from ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        public void DeleteTicketReminder (string ticketId, string ticketReminderId, string authenticationToken)
        {
             DeleteTicketReminderWithHttpInfo(ticketId, ticketReminderId, authenticationToken);
        }

        /// <summary>
        ///  Remove from ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTicketReminderWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->DeleteTicketReminder");
            // verify the required parameter 'ticketReminderId' is set
            if (ticketReminderId == null)
                throw new ApiException(400, "Missing required parameter 'ticketReminderId' when calling DefaultApi->DeleteTicketReminder");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeleteTicketReminder");

            var localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (ticketReminderId != null) localVarPathParams.Add("ticket_reminder_id", Configuration.ApiClient.ParameterToString(ticketReminderId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicketReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove from ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTicketReminderAsync (string ticketId, string ticketReminderId, string authenticationToken)
        {
             await DeleteTicketReminderAsyncWithHttpInfo(ticketId, ticketReminderId, authenticationToken);

        }

        /// <summary>
        ///  Remove from ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketReminderAsyncWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->DeleteTicketReminder");
            // verify the required parameter 'ticketReminderId' is set
            if (ticketReminderId == null)
                throw new ApiException(400, "Missing required parameter 'ticketReminderId' when calling DefaultApi->DeleteTicketReminder");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeleteTicketReminder");

            var localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (ticketReminderId != null) localVarPathParams.Add("ticket_reminder_id", Configuration.ApiClient.ParameterToString(ticketReminderId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicketReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove from tag_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        public void DeleteTicketTag (string ticketId, string tagId, string authenticationToken)
        {
             DeleteTicketTagWithHttpInfo(ticketId, tagId, authenticationToken);
        }

        /// <summary>
        ///  Remove from tag_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTicketTagWithHttpInfo (string ticketId, string tagId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->DeleteTicketTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling DefaultApi->DeleteTicketTag");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeleteTicketTag");

            var localVarPath = "/tickets/{ticket_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicketTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Remove from tag_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTicketTagAsync (string ticketId, string tagId, string authenticationToken)
        {
             await DeleteTicketTagAsyncWithHttpInfo(ticketId, tagId, authenticationToken);

        }

        /// <summary>
        ///  Remove from tag_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="tagId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketTagAsyncWithHttpInfo (string ticketId, string tagId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->DeleteTicketTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling DefaultApi->DeleteTicketTag");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->DeleteTicketTag");

            var localVarPath = "/tickets/{ticket_id}/tags/{tag_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (tagId != null) localVarPathParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicketTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Retrieve ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        public TicketPremadeResponse GetPremadeResponse (string ticketPremadeResponseId, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = GetPremadeResponseWithHttpInfo(ticketPremadeResponseId, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        public ApiResponse< TicketPremadeResponse > GetPremadeResponseWithHttpInfo (string ticketPremadeResponseId, string authenticationToken)
        {
            // verify the required parameter 'ticketPremadeResponseId' is set
            if (ticketPremadeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'ticketPremadeResponseId' when calling DefaultApi->GetPremadeResponse");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetPremadeResponse");

            var localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketPremadeResponseId != null) localVarPathParams.Add("ticket_premade_response_id", Configuration.ApiClient.ParameterToString(ticketPremadeResponseId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPremadeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Retrieve ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        public async System.Threading.Tasks.Task<TicketPremadeResponse> GetPremadeResponseAsync (string ticketPremadeResponseId, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = await GetPremadeResponseAsyncWithHttpInfo(ticketPremadeResponseId, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve ticket_premade_response_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketPremadeResponseId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> GetPremadeResponseAsyncWithHttpInfo (string ticketPremadeResponseId, string authenticationToken)
        {
            // verify the required parameter 'ticketPremadeResponseId' is set
            if (ticketPremadeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'ticketPremadeResponseId' when calling DefaultApi->GetPremadeResponse");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetPremadeResponse");

            var localVarPath = "/tickets/premade_responses/{ticket_premade_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketPremadeResponseId != null) localVarPathParams.Add("ticket_premade_response_id", Configuration.ApiClient.ParameterToString(ticketPremadeResponseId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPremadeResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Retrieve premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>TicketPremadeResponse</returns>
        public TicketPremadeResponse GetPremadeResponses (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = GetPremadeResponsesWithHttpInfo(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        public ApiResponse< TicketPremadeResponse > GetPremadeResponsesWithHttpInfo (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null)
        {
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetPremadeResponses");

            var localVarPath = "/tickets/premade_responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPremadeResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Retrieve premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>Task of TicketPremadeResponse</returns>
        public async System.Threading.Tasks.Task<TicketPremadeResponse> GetPremadeResponsesAsync (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = await GetPremadeResponsesAsyncWithHttpInfo(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User authentication uuid</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> GetPremadeResponsesAsyncWithHttpInfo (decimal? authenticationToken, int? draw = null, string category = null, string sortBy = null, int? start = null, string sortByOrder = null, string q = null, int? length = null, string statuses = null, int? fields = null)
        {
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetPremadeResponses");

            var localVarPath = "/tickets/premade_responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPremadeResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Retrieve ticket_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Ticket</returns>
        public Ticket GetTicket (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null)
        {
             ApiResponse<Ticket> localVarResponse = GetTicketWithHttpInfo(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve ticket_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > GetTicketWithHttpInfo (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicket");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicket");

            var localVarPath = "/tickets/{ticket_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (orderedColumn != null) localVarQueryParams.Add("ordered_column", Configuration.ApiClient.ParameterToString(orderedColumn)); // query parameter
            if (orderedBy != null) localVarQueryParams.Add("ordered_by", Configuration.ApiClient.ParameterToString(orderedBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve ticket_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> GetTicketAsync (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null)
        {
             ApiResponse<Ticket> localVarResponse = await GetTicketAsyncWithHttpInfo(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve ticket_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="category"> (optional)</param>
        /// <param name="statuses"> (optional)</param>
        /// <param name="orderedColumn"> (optional)</param>
        /// <param name="orderedBy"> (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketAsyncWithHttpInfo (string ticketId, string authenticationToken, string category = null, string statuses = null, string orderedColumn = null, string orderedBy = null)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicket");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicket");

            var localVarPath = "/tickets/{ticket_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (orderedColumn != null) localVarQueryParams.Add("ordered_column", Configuration.ApiClient.ParameterToString(orderedColumn)); // query parameter
            if (orderedBy != null) localVarQueryParams.Add("ordered_by", Configuration.ApiClient.ParameterToString(orderedBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Ticket</returns>
        public Ticket GetTicketReminder (string ticketId, string ticketReminderId, string authenticationToken)
        {
             ApiResponse<Ticket> localVarResponse = GetTicketReminderWithHttpInfo(ticketId, ticketReminderId, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > GetTicketReminderWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketReminder");
            // verify the required parameter 'ticketReminderId' is set
            if (ticketReminderId == null)
                throw new ApiException(400, "Missing required parameter 'ticketReminderId' when calling DefaultApi->GetTicketReminder");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketReminder");

            var localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (ticketReminderId != null) localVarPathParams.Add("ticket_reminder_id", Configuration.ApiClient.ParameterToString(ticketReminderId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> GetTicketReminderAsync (string ticketId, string ticketReminderId, string authenticationToken)
        {
             ApiResponse<Ticket> localVarResponse = await GetTicketReminderAsyncWithHttpInfo(ticketId, ticketReminderId, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve ticket_reminder_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketReminderId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketReminderAsyncWithHttpInfo (string ticketId, string ticketReminderId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketReminder");
            // verify the required parameter 'ticketReminderId' is set
            if (ticketReminderId == null)
                throw new ApiException(400, "Missing required parameter 'ticketReminderId' when calling DefaultApi->GetTicketReminder");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketReminder");

            var localVarPath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (ticketReminderId != null) localVarPathParams.Add("ticket_reminder_id", Configuration.ApiClient.ParameterToString(ticketReminderId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Ticket</returns>
        public Ticket GetTicketReminders (string ticketId, string authenticationToken)
        {
             ApiResponse<Ticket> localVarResponse = GetTicketRemindersWithHttpInfo(ticketId, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > GetTicketRemindersWithHttpInfo (string ticketId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> GetTicketRemindersAsync (string ticketId, string authenticationToken)
        {
             ApiResponse<Ticket> localVarResponse = await GetTicketRemindersAsyncWithHttpInfo(ticketId, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketRemindersAsyncWithHttpInfo (string ticketId, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Ticket</returns>
        public Ticket GetTicketTags (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null)
        {
             ApiResponse<Ticket> localVarResponse = GetTicketTagsWithHttpInfo(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > GetTicketTagsWithHttpInfo (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketTags");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketTags");

            var localVarPath = "/tickets/{ticket_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (tagId != null) localVarQueryParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> GetTicketTagsAsync (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null)
        {
             ApiResponse<Ticket> localVarResponse = await GetTicketTagsAsyncWithHttpInfo(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="authenticationToken"></param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> GetTicketTagsAsyncWithHttpInfo (string ticketId, string authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, int? tagId = null)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->GetTicketTags");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTicketTags");

            var localVarPath = "/tickets/{ticket_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (tagId != null) localVarQueryParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicketTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Retrieve tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>List&lt;Ticket&gt;</returns>
        public List<Ticket> GetTickets (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null)
        {
             ApiResponse<List<Ticket>> localVarResponse = GetTicketsWithHttpInfo(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        public ApiResponse< List<Ticket> > GetTicketsWithHttpInfo (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null)
        {
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (accountId != null) localVarQueryParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (tagId != null) localVarQueryParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
        }

        /// <summary>
        ///  Retrieve tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticket>> GetTicketsAsync (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null)
        {
             ApiResponse<List<Ticket>> localVarResponse = await GetTicketsAsyncWithHttpInfo(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationToken">User athentication uuid</param>
        /// <param name="start">Start query value (optional)</param>
        /// <param name="length">Number of rows query (optional)</param>
        /// <param name="draw">Number of times table has been reloaded (optional)</param>
        /// <param name="q">Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)</param>
        /// <param name="sortBy">Column name to order table by (optional)</param>
        /// <param name="sortByOrder">Sort by ascending or descending (optional)</param>
        /// <param name="fields">Column headers in order (optional)</param>
        /// <param name="statuses">Filter by statuses (optional)</param>
        /// <param name="category">Filter by category (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="tagId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> GetTicketsAsyncWithHttpInfo (decimal? authenticationToken, int? start = null, int? length = null, int? draw = null, string q = null, string sortBy = null, string sortByOrder = null, string fields = null, string statuses = null, string category = null, string accountId = null, int? tagId = null, string userId = null)
        {
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->GetTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (length != null) localVarQueryParams.Add("length", Configuration.ApiClient.ParameterToString(length)); // query parameter
            if (draw != null) localVarQueryParams.Add("draw", Configuration.ApiClient.ParameterToString(draw)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sort_by", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortByOrder != null) localVarQueryParams.Add("sort_by_order", Configuration.ApiClient.ParameterToString(sortByOrder)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (statuses != null) localVarQueryParams.Add("statuses", Configuration.ApiClient.ParameterToString(statuses)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (accountId != null) localVarQueryParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (tagId != null) localVarQueryParams.Add("tag_id", Configuration.ApiClient.ParameterToString(tagId)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
        }

        /// <summary>
        ///  Insert a ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketMessage</returns>
        public TicketMessage PostTicketMessages (List<TicketMessage> body, string authenticationToken)
        {
             ApiResponse<TicketMessage> localVarResponse = PostTicketMessagesWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketMessage</returns>
        public ApiResponse< TicketMessage > PostTicketMessagesWithHttpInfo (List<TicketMessage> body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTicketMessages");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PostTicketMessages");

            var localVarPath = "/ticket_messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTicketMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketMessage)));
        }

        /// <summary>
        ///  Insert a ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketMessage</returns>
        public async System.Threading.Tasks.Task<TicketMessage> PostTicketMessagesAsync (List<TicketMessage> body, string authenticationToken)
        {
             ApiResponse<TicketMessage> localVarResponse = await PostTicketMessagesAsyncWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Insert a ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketMessage>> PostTicketMessagesAsyncWithHttpInfo (List<TicketMessage> body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTicketMessages");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PostTicketMessages");

            var localVarPath = "/ticket_messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTicketMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketMessage)));
        }

        /// <summary>
        ///  Insert a reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        public void PostTicketReminders (string ticketId, Ticket body, string authenticationToken)
        {
             PostTicketRemindersWithHttpInfo(ticketId, body, authenticationToken);
        }

        /// <summary>
        ///  Insert a reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostTicketRemindersWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PostTicketReminders");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PostTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Insert a reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostTicketRemindersAsync (string ticketId, Ticket body, string authenticationToken)
        {
             await PostTicketRemindersAsyncWithHttpInfo(ticketId, body, authenticationToken);

        }

        /// <summary>
        ///  Insert a reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostTicketRemindersAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PostTicketReminders");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PostTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Insert a tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Ticket</returns>
        public Ticket PostTickets (List<TicketMessage> body, decimal? authenticationToken = null)
        {
             ApiResponse<Ticket> localVarResponse = PostTicketsWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>ApiResponse of Ticket</returns>
        public ApiResponse< Ticket > PostTicketsWithHttpInfo (List<TicketMessage> body, decimal? authenticationToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Insert a tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of Ticket</returns>
        public async System.Threading.Tasks.Task<Ticket> PostTicketsAsync (List<TicketMessage> body, decimal? authenticationToken = null)
        {
             ApiResponse<Ticket> localVarResponse = await PostTicketsAsyncWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Insert a tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of ApiResponse (Ticket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticket>> PostTicketsAsyncWithHttpInfo (List<TicketMessage> body, decimal? authenticationToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticket)));
        }

        /// <summary>
        ///  Update premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketPremadeResponse</returns>
        public TicketPremadeResponse PutPremadeResponses (TicketPremadeResponse body, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = PutPremadeResponsesWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketPremadeResponse</returns>
        public ApiResponse< TicketPremadeResponse > PutPremadeResponsesWithHttpInfo (TicketPremadeResponse body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutPremadeResponses");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutPremadeResponses");

            var localVarPath = "/tickets/premade_responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPremadeResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Update premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketPremadeResponse</returns>
        public async System.Threading.Tasks.Task<TicketPremadeResponse> PutPremadeResponsesAsync (TicketPremadeResponse body, string authenticationToken)
        {
             ApiResponse<TicketPremadeResponse> localVarResponse = await PutPremadeResponsesAsyncWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update premade_responses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketPremadeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketPremadeResponse>> PutPremadeResponsesAsyncWithHttpInfo (TicketPremadeResponse body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutPremadeResponses");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutPremadeResponses");

            var localVarPath = "/tickets/premade_responses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPremadeResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketPremadeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketPremadeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketPremadeResponse)));
        }

        /// <summary>
        ///  Update ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>TicketMessage</returns>
        public TicketMessage PutTicketMessages (TicketMessage body, string authenticationToken)
        {
             ApiResponse<TicketMessage> localVarResponse = PutTicketMessagesWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of TicketMessage</returns>
        public ApiResponse< TicketMessage > PutTicketMessagesWithHttpInfo (TicketMessage body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketMessages");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketMessages");

            var localVarPath = "/ticket_messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketMessage)));
        }

        /// <summary>
        ///  Update ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of TicketMessage</returns>
        public async System.Threading.Tasks.Task<TicketMessage> PutTicketMessagesAsync (TicketMessage body, string authenticationToken)
        {
             ApiResponse<TicketMessage> localVarResponse = await PutTicketMessagesAsyncWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update ticket_messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse (TicketMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketMessage>> PutTicketMessagesAsyncWithHttpInfo (TicketMessage body, string authenticationToken)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketMessages");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketMessages");

            var localVarPath = "/ticket_messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketMessage)));
        }

        /// <summary>
        ///  Update reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        public void PutTicketReminders (string ticketId, Ticket body, string authenticationToken)
        {
             PutTicketRemindersWithHttpInfo(ticketId, body, authenticationToken);
        }

        /// <summary>
        ///  Update reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTicketRemindersWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PutTicketReminders");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTicketRemindersAsync (string ticketId, Ticket body, string authenticationToken)
        {
             await PutTicketRemindersAsyncWithHttpInfo(ticketId, body, authenticationToken);

        }

        /// <summary>
        ///  Update reminders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketRemindersAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PutTicketReminders");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketReminders");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketReminders");

            var localVarPath = "/tickets/{ticket_id}/reminders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketReminders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update ticket_review
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns></returns>
        public void PutTicketReview (Ticket body, string ticketUuid, string rating)
        {
             PutTicketReviewWithHttpInfo(body, ticketUuid, rating);
        }

        /// <summary>
        ///  Update ticket_review
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTicketReviewWithHttpInfo (Ticket body, string ticketUuid, string rating)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketReview");
            // verify the required parameter 'ticketUuid' is set
            if (ticketUuid == null)
                throw new ApiException(400, "Missing required parameter 'ticketUuid' when calling DefaultApi->PutTicketReview");
            // verify the required parameter 'rating' is set
            if (rating == null)
                throw new ApiException(400, "Missing required parameter 'rating' when calling DefaultApi->PutTicketReview");

            var localVarPath = "/ticket_review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketUuid != null) localVarQueryParams.Add("ticket_uuid", Configuration.ApiClient.ParameterToString(ticketUuid)); // query parameter
            if (rating != null) localVarQueryParams.Add("rating", Configuration.ApiClient.ParameterToString(rating)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update ticket_review
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTicketReviewAsync (Ticket body, string ticketUuid, string rating)
        {
             await PutTicketReviewAsyncWithHttpInfo(body, ticketUuid, rating);

        }

        /// <summary>
        ///  Update ticket_review
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="ticketUuid"></param>
        /// <param name="rating"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketReviewAsyncWithHttpInfo (Ticket body, string ticketUuid, string rating)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketReview");
            // verify the required parameter 'ticketUuid' is set
            if (ticketUuid == null)
                throw new ApiException(400, "Missing required parameter 'ticketUuid' when calling DefaultApi->PutTicketReview");
            // verify the required parameter 'rating' is set
            if (rating == null)
                throw new ApiException(400, "Missing required parameter 'rating' when calling DefaultApi->PutTicketReview");

            var localVarPath = "/ticket_review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketUuid != null) localVarQueryParams.Add("ticket_uuid", Configuration.ApiClient.ParameterToString(ticketUuid)); // query parameter
            if (rating != null) localVarQueryParams.Add("rating", Configuration.ApiClient.ParameterToString(rating)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns></returns>
        public void PutTicketTags (string ticketId, Ticket body, string authenticationToken)
        {
             PutTicketTagsWithHttpInfo(ticketId, body, authenticationToken);
        }

        /// <summary>
        ///  Update tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTicketTagsWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PutTicketTags");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketTags");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketTags");

            var localVarPath = "/tickets/{ticket_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTicketTagsAsync (string ticketId, Ticket body, string authenticationToken)
        {
             await PutTicketTagsAsyncWithHttpInfo(ticketId, body, authenticationToken);

        }

        /// <summary>
        ///  Update tags
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTicketTagsAsyncWithHttpInfo (string ticketId, Ticket body, string authenticationToken)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
                throw new ApiException(400, "Missing required parameter 'ticketId' when calling DefaultApi->PutTicketTags");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTicketTags");
            // verify the required parameter 'authenticationToken' is set
            if (authenticationToken == null)
                throw new ApiException(400, "Missing required parameter 'authenticationToken' when calling DefaultApi->PutTicketTags");

            var localVarPath = "/tickets/{ticket_id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketId != null) localVarPathParams.Add("ticket_id", Configuration.ApiClient.ParameterToString(ticketId)); // path parameter
            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTicketTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>List&lt;Ticket&gt;</returns>
        public List<Ticket> PutTickets (List<Ticket> body, bool? authenticationToken = null)
        {
             ApiResponse<List<Ticket>> localVarResponse = PutTicketsWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>ApiResponse of List&lt;Ticket&gt;</returns>
        public ApiResponse< List<Ticket> > PutTicketsWithHttpInfo (List<Ticket> body, bool? authenticationToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
        }

        /// <summary>
        ///  Update tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of List&lt;Ticket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticket>> PutTicketsAsync (List<Ticket> body, bool? authenticationToken = null)
        {
             ApiResponse<List<Ticket>> localVarResponse = await PutTicketsAsyncWithHttpInfo(body, authenticationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update tickets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The request body for the operation</param>
        /// <param name="authenticationToken">User athentication uuid (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Ticket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticket>>> PutTicketsAsyncWithHttpInfo (List<Ticket> body, bool? authenticationToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutTickets");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticationToken != null) localVarQueryParams.Add("authentication_token", Configuration.ApiClient.ParameterToString(authenticationToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticket>)));
        }

    }
}
