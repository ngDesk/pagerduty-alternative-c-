/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Attachment
    /// </summary>
    [DataContract]
    public partial class Attachment :  IEquatable<Attachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachment" /> class.
        /// </summary>
        /// <param name="FILE_NAME">FILE_NAME.</param>
        /// <param name="FILE_EXTENSION">FILE_EXTENSION.</param>
        /// <param name="FILE">FILE.</param>
        /// <param name="TICKET_ATTACHMENT_UUID">TICKET_ATTACHMENT_UUID.</param>
        /// <param name="COMPANY_ID">COMPANY_ID.</param>
        public Attachment(string FILE_NAME = default(string), string FILE_EXTENSION = default(string), string FILE = default(string), int? TICKET_ATTACHMENT_UUID = default(int?), string COMPANY_ID = default(string))
        {
            this.FILE_NAME = FILE_NAME;
            this.FILE_EXTENSION = FILE_EXTENSION;
            this.FILE = FILE;
            this.TICKET_ATTACHMENT_UUID = TICKET_ATTACHMENT_UUID;
            this.COMPANY_ID = COMPANY_ID;
        }
        
        /// <summary>
        /// Gets or Sets FILE_NAME
        /// </summary>
        [DataMember(Name="FILE_NAME", EmitDefaultValue=false)]
        public string FILE_NAME { get; set; }

        /// <summary>
        /// Gets or Sets FILE_EXTENSION
        /// </summary>
        [DataMember(Name="FILE_EXTENSION", EmitDefaultValue=false)]
        public string FILE_EXTENSION { get; set; }

        /// <summary>
        /// Gets or Sets FILE
        /// </summary>
        [DataMember(Name="FILE", EmitDefaultValue=false)]
        public string FILE { get; set; }

        /// <summary>
        /// Gets or Sets TICKET_ATTACHMENT_UUID
        /// </summary>
        [DataMember(Name="TICKET_ATTACHMENT_UUID", EmitDefaultValue=false)]
        public int? TICKET_ATTACHMENT_UUID { get; set; }

        /// <summary>
        /// Gets or Sets COMPANY_ID
        /// </summary>
        [DataMember(Name="COMPANY_ID", EmitDefaultValue=false)]
        public string COMPANY_ID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  FILE_NAME: ").Append(FILE_NAME).Append("\n");
            sb.Append("  FILE_EXTENSION: ").Append(FILE_EXTENSION).Append("\n");
            sb.Append("  FILE: ").Append(FILE).Append("\n");
            sb.Append("  TICKET_ATTACHMENT_UUID: ").Append(TICKET_ATTACHMENT_UUID).Append("\n");
            sb.Append("  COMPANY_ID: ").Append(COMPANY_ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Attachment);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="other">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FILE_NAME == other.FILE_NAME ||
                    this.FILE_NAME != null &&
                    this.FILE_NAME.Equals(other.FILE_NAME)
                ) && 
                (
                    this.FILE_EXTENSION == other.FILE_EXTENSION ||
                    this.FILE_EXTENSION != null &&
                    this.FILE_EXTENSION.Equals(other.FILE_EXTENSION)
                ) && 
                (
                    this.FILE == other.FILE ||
                    this.FILE != null &&
                    this.FILE.Equals(other.FILE)
                ) && 
                (
                    this.TICKET_ATTACHMENT_UUID == other.TICKET_ATTACHMENT_UUID ||
                    this.TICKET_ATTACHMENT_UUID != null &&
                    this.TICKET_ATTACHMENT_UUID.Equals(other.TICKET_ATTACHMENT_UUID)
                ) && 
                (
                    this.COMPANY_ID == other.COMPANY_ID ||
                    this.COMPANY_ID != null &&
                    this.COMPANY_ID.Equals(other.COMPANY_ID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FILE_NAME != null)
                    hash = hash * 59 + this.FILE_NAME.GetHashCode();
                if (this.FILE_EXTENSION != null)
                    hash = hash * 59 + this.FILE_EXTENSION.GetHashCode();
                if (this.FILE != null)
                    hash = hash * 59 + this.FILE.GetHashCode();
                if (this.TICKET_ATTACHMENT_UUID != null)
                    hash = hash * 59 + this.TICKET_ATTACHMENT_UUID.GetHashCode();
                if (this.COMPANY_ID != null)
                    hash = hash * 59 + this.COMPANY_ID.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
