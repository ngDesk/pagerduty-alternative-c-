/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test DeletePremadeResponse
        /// </summary>
        [Test]
        public void DeletePremadeResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ticketPremadeResponseId = null;
            //string authenticationToken = null;
            //var response = instance.DeletePremadeResponse(ticketPremadeResponseId, authenticationToken);
            //Assert.IsInstanceOf<TicketPremadeResponse> (response, "response is TicketPremadeResponse");
        }
        
        /// <summary>
        /// Test DeleteTicketReminder
        /// </summary>
        [Test]
        public void DeleteTicketReminderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string ticketReminderId = null;
            //string authenticationToken = null;
            //instance.DeleteTicketReminder(ticketId, ticketReminderId, authenticationToken);
            
        }
        
        /// <summary>
        /// Test DeleteTicketTag
        /// </summary>
        [Test]
        public void DeleteTicketTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string tagId = null;
            //string authenticationToken = null;
            //instance.DeleteTicketTag(ticketId, tagId, authenticationToken);
            
        }
        
        /// <summary>
        /// Test GetPremadeResponse
        /// </summary>
        [Test]
        public void GetPremadeResponseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketPremadeResponseId = null;
            //string authenticationToken = null;
            //var response = instance.GetPremadeResponse(ticketPremadeResponseId, authenticationToken);
            //Assert.IsInstanceOf<TicketPremadeResponse> (response, "response is TicketPremadeResponse");
        }
        
        /// <summary>
        /// Test GetPremadeResponses
        /// </summary>
        [Test]
        public void GetPremadeResponsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? authenticationToken = null;
            //int? draw = null;
            //string category = null;
            //string sortBy = null;
            //int? start = null;
            //string sortByOrder = null;
            //string q = null;
            //int? length = null;
            //string statuses = null;
            //int? fields = null;
            //var response = instance.GetPremadeResponses(authenticationToken, draw, category, sortBy, start, sortByOrder, q, length, statuses, fields);
            //Assert.IsInstanceOf<TicketPremadeResponse> (response, "response is TicketPremadeResponse");
        }
        
        /// <summary>
        /// Test GetTicket
        /// </summary>
        [Test]
        public void GetTicketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string authenticationToken = null;
            //string category = null;
            //string statuses = null;
            //string orderedColumn = null;
            //string orderedBy = null;
            //var response = instance.GetTicket(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test GetTicketReminder
        /// </summary>
        [Test]
        public void GetTicketReminderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string ticketReminderId = null;
            //string authenticationToken = null;
            //var response = instance.GetTicketReminder(ticketId, ticketReminderId, authenticationToken);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test GetTicketReminders
        /// </summary>
        [Test]
        public void GetTicketRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string authenticationToken = null;
            //var response = instance.GetTicketReminders(ticketId, authenticationToken);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test GetTicketTags
        /// </summary>
        [Test]
        public void GetTicketTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string authenticationToken = null;
            //int? start = null;
            //int? length = null;
            //int? draw = null;
            //string q = null;
            //string sortBy = null;
            //string sortByOrder = null;
            //string fields = null;
            //int? tagId = null;
            //var response = instance.GetTicketTags(ticketId, authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, tagId);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test GetTickets
        /// </summary>
        [Test]
        public void GetTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? authenticationToken = null;
            //int? start = null;
            //int? length = null;
            //int? draw = null;
            //string q = null;
            //string sortBy = null;
            //string sortByOrder = null;
            //string fields = null;
            //string statuses = null;
            //string category = null;
            //string accountId = null;
            //int? tagId = null;
            //string userId = null;
            //var response = instance.GetTickets(authenticationToken, start, length, draw, q, sortBy, sortByOrder, fields, statuses, category, accountId, tagId, userId);
            //Assert.IsInstanceOf<List<Ticket>> (response, "response is List<Ticket>");
        }
        
        /// <summary>
        /// Test PostTicketMessages
        /// </summary>
        [Test]
        public void PostTicketMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TicketMessage> body = null;
            //string authenticationToken = null;
            //var response = instance.PostTicketMessages(body, authenticationToken);
            //Assert.IsInstanceOf<TicketMessage> (response, "response is TicketMessage");
        }
        
        /// <summary>
        /// Test PostTicketReminders
        /// </summary>
        [Test]
        public void PostTicketRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //Ticket body = null;
            //string authenticationToken = null;
            //instance.PostTicketReminders(ticketId, body, authenticationToken);
            
        }
        
        /// <summary>
        /// Test PostTickets
        /// </summary>
        [Test]
        public void PostTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TicketMessage> body = null;
            //decimal? authenticationToken = null;
            //var response = instance.PostTickets(body, authenticationToken);
            //Assert.IsInstanceOf<Ticket> (response, "response is Ticket");
        }
        
        /// <summary>
        /// Test PutPremadeResponses
        /// </summary>
        [Test]
        public void PutPremadeResponsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TicketPremadeResponse body = null;
            //string authenticationToken = null;
            //var response = instance.PutPremadeResponses(body, authenticationToken);
            //Assert.IsInstanceOf<TicketPremadeResponse> (response, "response is TicketPremadeResponse");
        }
        
        /// <summary>
        /// Test PutTicketMessages
        /// </summary>
        [Test]
        public void PutTicketMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TicketMessage body = null;
            //string authenticationToken = null;
            //var response = instance.PutTicketMessages(body, authenticationToken);
            //Assert.IsInstanceOf<TicketMessage> (response, "response is TicketMessage");
        }
        
        /// <summary>
        /// Test PutTicketReminders
        /// </summary>
        [Test]
        public void PutTicketRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //Ticket body = null;
            //string authenticationToken = null;
            //instance.PutTicketReminders(ticketId, body, authenticationToken);
            
        }
        
        /// <summary>
        /// Test PutTicketReview
        /// </summary>
        [Test]
        public void PutTicketReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Ticket body = null;
            //string ticketUuid = null;
            //string rating = null;
            //instance.PutTicketReview(body, ticketUuid, rating);
            
        }
        
        /// <summary>
        /// Test PutTicketTags
        /// </summary>
        [Test]
        public void PutTicketTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //Ticket body = null;
            //string authenticationToken = null;
            //instance.PutTicketTags(ticketId, body, authenticationToken);
            
        }
        
        /// <summary>
        /// Test PutTickets
        /// </summary>
        [Test]
        public void PutTicketsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Ticket> body = null;
            //bool? authenticationToken = null;
            //var response = instance.PutTickets(body, authenticationToken);
            //Assert.IsInstanceOf<List<Ticket>> (response, "response is List<Ticket>");
        }
        
    }

}
