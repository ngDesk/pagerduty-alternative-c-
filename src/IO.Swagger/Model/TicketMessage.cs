/* 
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TicketMessage
    /// </summary>
    [DataContract]
    public partial class TicketMessage :  IEquatable<TicketMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketMessage" /> class.
        /// </summary>
        /// <param name="TICKET_MESSAGE_ID">TICKET_MESSAGE_ID.</param>
        /// <param name="TICKET_ID">TICKET_ID.</param>
        /// <param name="BODY">BODY.</param>
        /// <param name="USER_ID">USER_ID.</param>
        /// <param name="DATE_CREATED">DATE_CREATED.</param>
        /// <param name="COMPANY_ID">COMPANY_ID.</param>
        /// <param name="TICKET_ATTACHMENTS">TICKET_ATTACHMENTS.</param>
        /// <param name="Element1">Element1.</param>
        public TicketMessage(int? TICKET_MESSAGE_ID = default(int?), int? TICKET_ID = default(int?), string BODY = default(string), int? USER_ID = default(int?), DateTime? DATE_CREATED = default(DateTime?), int? COMPANY_ID = default(int?), List<Attachment> TICKET_ATTACHMENTS = default(List<Attachment>), string Element1 = default(string))
        {
            this.TICKET_MESSAGE_ID = TICKET_MESSAGE_ID;
            this.TICKET_ID = TICKET_ID;
            this.BODY = BODY;
            this.USER_ID = USER_ID;
            this.DATE_CREATED = DATE_CREATED;
            this.COMPANY_ID = COMPANY_ID;
            this.TICKET_ATTACHMENTS = TICKET_ATTACHMENTS;
            this.Element1 = Element1;
        }
        
        /// <summary>
        /// Gets or Sets TICKET_MESSAGE_ID
        /// </summary>
        [DataMember(Name="TICKET_MESSAGE_ID", EmitDefaultValue=false)]
        public int? TICKET_MESSAGE_ID { get; set; }

        /// <summary>
        /// Gets or Sets TICKET_ID
        /// </summary>
        [DataMember(Name="TICKET_ID", EmitDefaultValue=false)]
        public int? TICKET_ID { get; set; }

        /// <summary>
        /// Gets or Sets BODY
        /// </summary>
        [DataMember(Name="BODY", EmitDefaultValue=false)]
        public string BODY { get; set; }

        /// <summary>
        /// Gets or Sets USER_ID
        /// </summary>
        [DataMember(Name="USER_ID", EmitDefaultValue=false)]
        public int? USER_ID { get; set; }

        /// <summary>
        /// Gets or Sets DATE_CREATED
        /// </summary>
        [DataMember(Name="DATE_CREATED", EmitDefaultValue=false)]
        public DateTime? DATE_CREATED { get; set; }

        /// <summary>
        /// Gets or Sets COMPANY_ID
        /// </summary>
        [DataMember(Name="COMPANY_ID", EmitDefaultValue=false)]
        public int? COMPANY_ID { get; set; }

        /// <summary>
        /// Gets or Sets TICKET_ATTACHMENTS
        /// </summary>
        [DataMember(Name="TICKET_ATTACHMENTS", EmitDefaultValue=false)]
        public List<Attachment> TICKET_ATTACHMENTS { get; set; }

        /// <summary>
        /// Gets or Sets Element1
        /// </summary>
        [DataMember(Name="element1", EmitDefaultValue=false)]
        public string Element1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketMessage {\n");
            sb.Append("  TICKET_MESSAGE_ID: ").Append(TICKET_MESSAGE_ID).Append("\n");
            sb.Append("  TICKET_ID: ").Append(TICKET_ID).Append("\n");
            sb.Append("  BODY: ").Append(BODY).Append("\n");
            sb.Append("  USER_ID: ").Append(USER_ID).Append("\n");
            sb.Append("  DATE_CREATED: ").Append(DATE_CREATED).Append("\n");
            sb.Append("  COMPANY_ID: ").Append(COMPANY_ID).Append("\n");
            sb.Append("  TICKET_ATTACHMENTS: ").Append(TICKET_ATTACHMENTS).Append("\n");
            sb.Append("  Element1: ").Append(Element1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TicketMessage);
        }

        /// <summary>
        /// Returns true if TicketMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of TicketMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketMessage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TICKET_MESSAGE_ID == other.TICKET_MESSAGE_ID ||
                    this.TICKET_MESSAGE_ID != null &&
                    this.TICKET_MESSAGE_ID.Equals(other.TICKET_MESSAGE_ID)
                ) && 
                (
                    this.TICKET_ID == other.TICKET_ID ||
                    this.TICKET_ID != null &&
                    this.TICKET_ID.Equals(other.TICKET_ID)
                ) && 
                (
                    this.BODY == other.BODY ||
                    this.BODY != null &&
                    this.BODY.Equals(other.BODY)
                ) && 
                (
                    this.USER_ID == other.USER_ID ||
                    this.USER_ID != null &&
                    this.USER_ID.Equals(other.USER_ID)
                ) && 
                (
                    this.DATE_CREATED == other.DATE_CREATED ||
                    this.DATE_CREATED != null &&
                    this.DATE_CREATED.Equals(other.DATE_CREATED)
                ) && 
                (
                    this.COMPANY_ID == other.COMPANY_ID ||
                    this.COMPANY_ID != null &&
                    this.COMPANY_ID.Equals(other.COMPANY_ID)
                ) && 
                (
                    this.TICKET_ATTACHMENTS == other.TICKET_ATTACHMENTS ||
                    this.TICKET_ATTACHMENTS != null &&
                    this.TICKET_ATTACHMENTS.SequenceEqual(other.TICKET_ATTACHMENTS)
                ) && 
                (
                    this.Element1 == other.Element1 ||
                    this.Element1 != null &&
                    this.Element1.Equals(other.Element1)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TICKET_MESSAGE_ID != null)
                    hash = hash * 59 + this.TICKET_MESSAGE_ID.GetHashCode();
                if (this.TICKET_ID != null)
                    hash = hash * 59 + this.TICKET_ID.GetHashCode();
                if (this.BODY != null)
                    hash = hash * 59 + this.BODY.GetHashCode();
                if (this.USER_ID != null)
                    hash = hash * 59 + this.USER_ID.GetHashCode();
                if (this.DATE_CREATED != null)
                    hash = hash * 59 + this.DATE_CREATED.GetHashCode();
                if (this.COMPANY_ID != null)
                    hash = hash * 59 + this.COMPANY_ID.GetHashCode();
                if (this.TICKET_ATTACHMENTS != null)
                    hash = hash * 59 + this.TICKET_ATTACHMENTS.GetHashCode();
                if (this.Element1 != null)
                    hash = hash * 59 + this.Element1.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
